// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: url-shortner_v1/url-shortner.proto

package url_shortner_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// URLShortnerClient is the client API for URLShortner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortnerClient interface {
	Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error)
	Create(ctx context.Context, in *FullURL, opts ...grpc.CallOption) (*ShortURL, error)
}

type uRLShortnerClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortnerClient(cc grpc.ClientConnInterface) URLShortnerClient {
	return &uRLShortnerClient{cc}
}

func (c *uRLShortnerClient) Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error) {
	out := new(FullURL)
	err := c.cc.Invoke(ctx, "/proto.URLShortner/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortnerClient) Create(ctx context.Context, in *FullURL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, "/proto.URLShortner/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortnerServer is the server API for URLShortner service.
// All implementations must embed UnimplementedURLShortnerServer
// for forward compatibility
type URLShortnerServer interface {
	Get(context.Context, *ShortURL) (*FullURL, error)
	Create(context.Context, *FullURL) (*ShortURL, error)
	mustEmbedUnimplementedURLShortnerServer()
}

// UnimplementedURLShortnerServer must be embedded to have forward compatible implementations.
type UnimplementedURLShortnerServer struct {
}

func (UnimplementedURLShortnerServer) Get(context.Context, *ShortURL) (*FullURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedURLShortnerServer) Create(context.Context, *FullURL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedURLShortnerServer) mustEmbedUnimplementedURLShortnerServer() {}

// UnsafeURLShortnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortnerServer will
// result in compilation errors.
type UnsafeURLShortnerServer interface {
	mustEmbedUnimplementedURLShortnerServer()
}

func RegisterURLShortnerServer(s grpc.ServiceRegistrar, srv URLShortnerServer) {
	s.RegisterService(&URLShortner_ServiceDesc, srv)
}

func _URLShortner_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortnerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLShortner/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortnerServer).Get(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortner_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortnerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.URLShortner/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortnerServer).Create(ctx, req.(*FullURL))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortner_ServiceDesc is the grpc.ServiceDesc for URLShortner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.URLShortner",
	HandlerType: (*URLShortnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _URLShortner_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _URLShortner_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url-shortner_v1/url-shortner.proto",
}
